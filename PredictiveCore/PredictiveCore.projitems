<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<PropertyGroup>
		<MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
		<HasSharedItems>true</HasSharedItems>
		<SharedGUID>{B910A4B7-B0C6-4A80-8613-1311C136D001}</SharedGUID>
	</PropertyGroup>
	<PropertyGroup Label="Configuration">
		<Import_RootNamespace>PredictiveCore</Import_RootNamespace>
	</PropertyGroup>
	<ItemGroup>
		<Compile Include="$(MSBuildThisFileDirectory)Garbage.cs" />
		<Compile Include="$(MSBuildThisFileDirectory)Geodes.cs" />
		<Compile Include="$(MSBuildThisFileDirectory)Movies.cs" />
		<Compile Include="$(MSBuildThisFileDirectory)NightEvents.cs" />
		<Compile Include="$(MSBuildThisFileDirectory)Trains.cs" />
		<Compile Include="$(MSBuildThisFileDirectory)Utilities.cs" />
	</ItemGroup>
	<UsingTask TaskName="FixZipAndDeploySafely" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
		<ParameterGroup>
			<ModZipPath Required="true" />
			<ModFolderName Required="true" />
			<DeployDir Required="true" />
		</ParameterGroup>
		<Task>
			<Reference Include="System.IO.Compression" />
			<Reference Include="System.IO.Compression.FileSystem" />
			<Using Namespace="System.Collections.Generic" />
			<Using Namespace="System.IO" />
			<Using Namespace="System.IO.Compression" />
			<Using Namespace="System.Linq" />
			<Code Type="Fragment" Language="cs">
			<![CDATA[
				try
				{
					string archivePath = Directory.GetFiles (ModZipPath).First
						((f) => f.EndsWith (".zip", System.StringComparison.Ordinal));

					Log.LogMessage (MessageImportance.High,
						$"Fixing file structure in ZIP file at {archivePath}...");
					ZipArchive zip = ZipFile.Open (archivePath, ZipArchiveMode.Update);
					List<string> oldFullNames = zip.Entries
						.Select ((e) => e.FullName).ToList ();
					foreach (string oldFullName in oldFullNames)
					{
						if (oldFullName.EndsWith (".xcf"))
						{
							zip.GetEntry (oldFullName).Delete ();
							continue;
						}
						if (!oldFullName.StartsWith ($"{ModFolderName}/[",
							System.StringComparison.Ordinal))
						{
							continue;
						}
						Log.LogMessage (MessageImportance.Low,
							$"...fixing entry {oldFullName}");
						ZipArchiveEntry oldEntry = zip.GetEntry (oldFullName);
						ZipArchiveEntry newEntry = zip.CreateEntry (oldFullName
							.Substring (ModFolderName.Length + 1));
						using (Stream oldStream = oldEntry.Open ())
						using (Stream newStream = newEntry.Open ())
						{
							oldStream.CopyTo (newStream);
						}
						oldEntry.Delete ();
					}
					zip.Dispose ();

					Log.LogMessage (MessageImportance.High,
						$"Deploy safely to {DeployDir} from from ZIP file at {archivePath}...");
					if (Directory.Exists (DeployDir))
					{
						Directory.Delete (DeployDir, true);
					}
					ZipFile.ExtractToDirectory (archivePath, DeployDir);
				}
				catch (Exception ex)
				{
					Log.LogErrorFromException (ex);
					return false;
				}
			]]>
			</Code>
		</Task>
	</UsingTask>
</Project>
